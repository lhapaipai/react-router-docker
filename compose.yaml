name: rr

services:
  reverse-proxy:
    image: traefik:latest
    command: --api.insecure=true
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker/traefik/traefik.yml:/etc/traefik/traefik.yml

  whoami:
    # A container that exposes an API to show its IP address
    image: traefik/whoami
    labels:
      - "traefik.http.routers.whoami-router.rule=Host(`whoami.docker.localhost`)"
      - "traefik.http.services.whoami-other.loadbalancer.server.port=80"
  front:
    build: .
    image: rg.fr-par.scw.cloud/pentatrion/react-router-docker:latest
    labels:
      - "traefik.http.routers.front.rule=Host(`front.react-router-docker.localhost`)"
    restart: unless-stopped
    # ports:
    #   - "3000:3000"
    environment:
      DATABASE_URL: "${DATABASE_URL:-postgresql://user:secret@db:5432/app?schema=public}"
    depends_on:
      db:
        condition: service_healthy
      db-migration:
        condition: service_completed_successfully
        restart: true
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --spider -q http://127.0.0.1:3000/healthcheck || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 3
  db:
    image: postgres:latest
    restart: unless-stopped
    # ports:
    #   - "5441:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "${POSTGRES_USER:-user}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD:-secret}"
      POSTGRES_DB: "${POSTGRES_DB:-app}"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-secret}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  db-migration:
    build: .
    command: ["pnpm", "prisma", "migrate", "deploy"]
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: "${DATABASE_URL:-postgresql://user:secret@db:5432/app?schema=public}"

volumes:
  db_data:
